#include "Colors.h"
#include <iostream>
#include <string>
#include <cstdlib>
#include <map>
#include <thread>
#include <chrono>
#include <ctime>
#include <mutex>

using namespace std;

static int sessionCounter = 0; // Global session counter to assign unique IDs

class ScreenSession {
public:
    string processName;
    int sessionId;
    int currentLine;
    int totalLines;
    string creationTimestamp;
    bool isActive;

    ScreenSession(string name, int totalLines)
        : processName(name), sessionId(++sessionCounter), currentLine(0), totalLines(totalLines), isActive(true) {
        time_t now = time(0);
        tm localtm;
        localtime_s(&localtm, &now); // Use localtime_s instead of localtime
        char timestamp[100];
        strftime(timestamp, sizeof(timestamp), "%m/%d/%Y, %I:%M:%S %p", &localtm);
        creationTimestamp = string(timestamp);
    }

    void displayDetails() const {
        cout << endl <<  "   Process: " << processName << endl;
        cout << "   ID: " << sessionId << endl;
        cout << "   Current instruction line: " << currentLine << " / " << totalLines << endl;
        cout << "   Created at: " << creationTimestamp << endl << endl;
    }

    void run() {
        while (isActive && currentLine < totalLines) {
            this_thread::sleep_for(chrono::seconds(1));  // Simulate a process running
            currentLine++;
        }
    }

    void stop() {
        isActive = false;
    }
};

class ScreenManager {
private:
    map<string, ScreenSession*> sessions;
    mutex sessionMutex;

public:
    ~ScreenManager() {
        for (auto& session : sessions) {
            delete session.second;
        }
    }

    void createSession(const string& name) {
        lock_guard<mutex> lock(sessionMutex);
        int totalLines = 150;

        if (sessions.find(name) == sessions.end()) {
            // Create a new session
            ScreenSession* session = new ScreenSession(name, totalLines);
            sessions[name] = session;
            thread(&ScreenSession::run, session).detach();  // Run the session in a separate thread
            system("cls");  // Clear screen when session is created
            cout << "> Created session for process: " << name << endl;
            session->displayDetails();
        }
        else {
            // If session already exists, port the user into that session
            system("cls");  // Clear the screen when re-entering the session
            cout << "> Session for process " << name << " already exists." << endl;
            ScreenSession* session = sessions[name];
            session->displayDetails();  // Redisplay session details
        }
    }

    bool reattachSession(const string& name) {
        lock_guard<mutex> lock(sessionMutex);
        if (sessions.find(name) != sessions.end()) {
            ScreenSession* session = sessions[name];
            system("cls");  // Clear screen when session is reattached
            cout << "> Reattached to session: " << name << endl;
            session->displayDetails();
            return true;
        }
        else {
            cout << "> No session found for process: " << name << endl;
            return false;
        }
    }

    void listSessions() {
        lock_guard<mutex> lock(sessionMutex);
        if (sessions.empty()) {
            cout << "> No active sessions." << endl;
        }
        else {
            cout << "> Active sessions:" << endl;
            for (const auto& pair : sessions) {
                cout << " - " << pair.first << " | " << "ID: " << pair.second->sessionId << " | " << pair.second->currentLine << "/" << pair.second->totalLines << " | " << pair.second->creationTimestamp << endl;
            }
        }
    }
};

static void printHeader();
static bool handleCommand(const string& command);
static bool inSession = false;
static string currentSessionName = ""; // Track current session name
static ScreenManager screenManager;

int main() {
    string input;
    printHeader();
    bool running = true;
    while (running) {
        if (inSession) {
            cout << "[" << currentSessionName << "] " << "> ";
        }
        else {
            cout << "> ";
        }
        getline(cin, input);
        running = handleCommand(input);
    }
    return 0;
}

static void printHeader() {
    cout << GREEN << "   _   _  _ ___ __  __ " << WHITE << " ___  ___  " << endl
        << GREEN << "  /_\\ | \\| |_ _|  \\/  |" << WHITE << "/ _ \\/ __| " << endl
        << GREEN << " / _ \\| . || || |\\/| |" << WHITE << " (_) \\__ \\ " << endl
        << GREEN << "/_/ \\_\\_|\\_|___|_|  |_|" << WHITE << "\\___/|___/ " << endl
        << GREEN << "\nWelcome to ANIMOS Command Line Emulator!" << endl
        << LIGHT_YELLOW << "\nType 'help' to view all commands\n" << RESET << endl;
}

static bool handleCommand(const string& command) {
    if (inSession && command == "exit") {
        // Exiting from the session, return to main menu
        cout << "> Exiting session..." << endl;
        inSession = false;
        currentSessionName = "";
        system("cls");  // Clear screen when returning to main menu
        printHeader();  // Print the main menu header again
        return true;
    }

    if (!inSession) {
        if (command == "initialize") {
            cout << GREEN << "> initialize command recognized. Doing something." << RESET << endl;
        }
        else if (command.substr(0, 9) == "screen -s") {
            string processName = command.substr(10);
            screenManager.createSession(processName);  // Example with 100 lines
            inSession = true;
            currentSessionName = processName;
        }
        else if (command.substr(0, 9) == "screen -r") {
            string processName = command.substr(10);
            if (screenManager.reattachSession(processName)) {
                inSession = true;
                currentSessionName = processName;  // Track current session name
            }
        }
        else if (command == "screen -ls") {
            screenManager.listSessions();
        }
        else if (command == "scheduler-test")
        {
            cout << GREEN << "> scheduler-test command recognized. Doing something." << RESET << endl;
        }
        else if (command == "scheduler-stop")
        {
            cout << GREEN << "> scheduler-stop command recognized. Doing something." << RESET << endl;
        }
        else if (command == "report-util")
        {
            cout << GREEN << "> report-util command recognized. Doing something." << RESET << endl;
        }
        else if (command == "clear") {
            system("cls");
            printHeader();
        }
        else if (command == "help") {
            cout << "> List of commands:" << endl
                << "    - initialize            (...)" << endl
                << "    - screen -s <name>      (start a session)" << endl
                << "    - screen -r <name>      (reattach to a session)" << endl
                << "    - screen -ls            (list all sessions)" << endl
                << "    - scheduler-test        (...)" << endl
                << "    - scheduler-stop        (...)" << endl
                << "    - report-util           (...)" << endl
                << "    - clear                 (clear the screen)" << endl
                << "    - exit                  (exit the emulator)" << endl;
        }
        else if (command == "exit") {
            cout << "> Exiting emulator..." << endl;
            exit(0);
        }
        else {
            cout << "> Unrecognized command: " << command << endl;
        }
    }
    else {
        cout << "> You are in session. Use 'exit' to leave." << endl;
    }

    return true;
}
